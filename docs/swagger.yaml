basePath: /api/v1
definitions:
  controllers.AssignTaskRequest:
    properties:
      assignee_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - assignee_id
    type: object
  controllers.AuthRequest:
    description: Authentication request for login
    properties:
      password:
        example: password123
        type: string
      username:
        example: johndoe
        type: string
    required:
    - password
    - username
    type: object
  controllers.AuthResponse:
    description: Authentication response with tokens
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  controllers.BulkUpdateFeatureFlagRequest:
    properties:
      flags:
        items:
          $ref: '#/definitions/controllers.FeatureFlagRequest'
        type: array
    required:
    - flags
    type: object
  controllers.FeatureFlagRequest:
    properties:
      description:
        example: Enable new UI design
        type: string
      enabled:
        example: true
        type: boolean
      key:
        example: new_ui
        type: string
      value:
        example: v2
        type: string
    required:
    - description
    - key
    type: object
  controllers.ForgotPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
    required:
    - email
    type: object
  controllers.LeaveProjectRequest:
    properties:
      projectId:
        type: string
      userId:
        type: string
    required:
    - projectId
    - userId
    type: object
  controllers.RegisterRequest:
    description: User registration request
    properties:
      email:
        example: john@example.com
        type: string
      first_name:
        example: John
        maxLength: 50
        minLength: 1
        type: string
      last_name:
        example: Doe
        maxLength: 50
        minLength: 1
        type: string
      password:
        example: password123
        maxLength: 100
        minLength: 6
        type: string
      username:
        example: johndoe
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  controllers.ResetPasswordRequest:
    properties:
      password:
        example: newpassword123
        maxLength: 100
        minLength: 6
        type: string
      token:
        example: reset_token_here
        type: string
    required:
    - password
    - token
    type: object
  controllers.ScrumUpdateTaskStatusRequest:
    properties:
      status:
        type: string
      taskId:
        type: string
    required:
    - status
    - taskId
    type: object
  controllers.UpdateProjectMemberRoleRequest:
    properties:
      role:
        enum:
        - owner
        - admin
        - member
        example: admin
        type: string
    required:
    - role
    type: object
  controllers.UpdateProjectOwnerRequest:
    properties:
      newOwnerId:
        type: string
      projectId:
        type: string
    required:
    - newOwnerId
    - projectId
    type: object
  controllers.UpdateTaskStatusRequest:
    properties:
      status:
        enum:
        - todo
        - in_progress
        - review
        - done
        - cancelled
        example: in_progress
        type: string
    required:
    - status
    type: object
  models.AddMemberRequest:
    description: Request to add a user as a project member
    properties:
      role:
        enum:
        - viewer
        - member
        - admin
        - owner
        example: member
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - role
    - user_id
    type: object
  models.EmailError:
    properties:
      code:
        type: string
      details:
        type: string
      error:
        type: string
    type: object
  models.EmailRequest:
    properties:
      body:
        example: This is the email content
        type: string
      subject:
        example: Important Notification
        type: string
      to:
        example: recipient@example.com
        type: string
    required:
    - body
    - subject
    - to
    type: object
  models.EmailResponse:
    properties:
      message:
        example: Email sent successfully!
        type: string
      sentAt:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: Error message
        type: string
    type: object
  models.FeatureFlag:
    properties:
      created_at:
        type: string
      description:
        type: string
      enabled:
        type: boolean
      id:
        type: string
      key:
        type: string
      updated_at:
        type: string
      value:
        type: string
    type: object
  models.Message:
    description: Message represents a message in the system
    properties:
      content:
        example: Hello team! How's the project going?
        type: string
      created_at:
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      project:
        allOf:
        - $ref: '#/definitions/models.Project'
        description: Additional fields for API responses
      project_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      sender:
        $ref: '#/definitions/models.User'
      sender_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      updated_at:
        type: string
    type: object
  models.MessageCreateRequest:
    description: Request to create a new message
    properties:
      content:
        example: Hello team! How's the project going?
        maxLength: 1000
        minLength: 1
        type: string
    required:
    - content
    type: object
  models.MessageUpdateRequest:
    description: Request to update an existing message
    properties:
      content:
        example: Updated message content
        maxLength: 1000
        minLength: 1
        type: string
    required:
    - content
    type: object
  models.MobileMessage:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      userAvatar:
        type: string
      userId:
        type: string
      userName:
        type: string
    type: object
  models.MobileMessagesResponse:
    properties:
      messages:
        items:
          $ref: '#/definitions/models.MobileMessage'
        type: array
      pagination:
        $ref: '#/definitions/models.PaginationInfo'
    type: object
  models.MobileProject:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      isMember:
        type: boolean
      isOwner:
        type: boolean
      memberCount:
        type: integer
      name:
        type: string
      ownerId:
        type: string
      ownerName:
        type: string
      sprintCount:
        type: integer
      status:
        type: string
      taskCount:
        type: integer
      updatedAt:
        type: string
    type: object
  models.MobileProjectResponse:
    properties:
      project:
        $ref: '#/definitions/models.MobileProject'
    type: object
  models.MobileProjectsResponse:
    properties:
      pagination:
        $ref: '#/definitions/models.PaginationInfo'
      projects:
        items:
          $ref: '#/definitions/models.MobileProject'
        type: array
    type: object
  models.MobileSprint:
    properties:
      completedTaskCount:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      endDate:
        type: string
      id:
        type: string
      name:
        type: string
      progress:
        type: number
      startDate:
        type: string
      status:
        type: string
      taskCount:
        type: integer
      updatedAt:
        type: string
    type: object
  models.MobileSprintsResponse:
    properties:
      pagination:
        $ref: '#/definitions/models.PaginationInfo'
      sprints:
        items:
          $ref: '#/definitions/models.MobileSprint'
        type: array
    type: object
  models.PaginationInfo:
    properties:
      currentPage:
        type: integer
      hasNext:
        type: boolean
      hasPrev:
        type: boolean
      itemsPerPage:
        type: integer
      totalItems:
        type: integer
      totalPages:
        type: integer
    type: object
  models.Project:
    description: Project represents a project in the system
    properties:
      created_at:
        type: string
      description:
        example: A description of my project
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      member_count:
        example: 5
        type: integer
      members:
        items:
          $ref: '#/definitions/models.User'
        type: array
      name:
        example: My Project
        type: string
      owner:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Additional fields for API responses
      project_owner_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      updated_at:
        type: string
    type: object
  models.ProjectCreateRequest:
    description: Request to create a new project
    properties:
      description:
        example: Description of my new project
        maxLength: 255
        minLength: 1
        type: string
      name:
        example: My New Project
        maxLength: 50
        minLength: 1
        type: string
    required:
    - description
    - name
    type: object
  models.ProjectMember:
    description: Project member information
    properties:
      joined_at:
        type: string
      project_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      role:
        example: member
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Additional fields for API responses
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  models.ProjectUpdateRequest:
    description: Request to update an existing project
    properties:
      description:
        example: Updated project description
        maxLength: 255
        minLength: 1
        type: string
      name:
        example: Updated Project Name
        maxLength: 50
        minLength: 1
        type: string
    type: object
  models.Sprint:
    description: Sprint represents a sprint in the system
    properties:
      created_at:
        type: string
      description:
        example: First sprint of the project
        type: string
      end_date:
        example: "2024-01-15T00:00:00Z"
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        example: Sprint 1
        type: string
      project:
        allOf:
        - $ref: '#/definitions/models.Project'
        description: Additional fields for API responses
      project_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      start_date:
        example: "2024-01-01T00:00:00Z"
        type: string
      status:
        example: planned
        type: string
      tasks:
        items:
          $ref: '#/definitions/models.Task'
        type: array
      updated_at:
        type: string
    type: object
  models.SprintCreateRequest:
    description: Request to create a new sprint
    properties:
      description:
        example: First sprint of the project
        maxLength: 500
        type: string
      end_date:
        example: "2024-01-15T00:00:00Z"
        type: string
      name:
        example: Sprint 1
        maxLength: 100
        minLength: 1
        type: string
      start_date:
        example: "2024-01-01T00:00:00Z"
        type: string
    required:
    - end_date
    - name
    - start_date
    type: object
  models.SprintUpdateRequest:
    description: Request to update an existing sprint
    properties:
      description:
        example: Updated sprint description
        maxLength: 500
        type: string
      end_date:
        example: "2024-01-15T00:00:00Z"
        type: string
      name:
        example: Updated Sprint Name
        maxLength: 100
        minLength: 1
        type: string
      start_date:
        example: "2024-01-01T00:00:00Z"
        type: string
      status:
        enum:
        - planned
        - active
        - completed
        - cancelled
        example: active
        type: string
    type: object
  models.Task:
    description: Task represents a task in the system
    properties:
      assignee:
        $ref: '#/definitions/models.User'
      assignee_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      created_at:
        type: string
      description:
        example: Create login and registration endpoints
        type: string
      due_date:
        example: "2024-01-15T00:00:00Z"
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      priority:
        example: medium
        type: string
      project:
        allOf:
        - $ref: '#/definitions/models.Project'
        description: Additional fields for API responses
      project_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      sprint:
        $ref: '#/definitions/models.Sprint'
      sprint_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      status:
        example: todo
        type: string
      story_points:
        example: 5
        type: integer
      title:
        example: Implement user authentication
        type: string
      updated_at:
        type: string
    type: object
  models.TaskCreateRequest:
    description: Request to create a new task
    properties:
      assignee_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      description:
        example: Create login and registration endpoints
        maxLength: 1000
        type: string
      due_date:
        example: "2024-01-15T00:00:00Z"
        type: string
      priority:
        enum:
        - low
        - medium
        - high
        - urgent
        example: medium
        type: string
      sprint_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      status:
        enum:
        - todo
        - in_progress
        - review
        - done
        example: todo
        type: string
      story_points:
        example: 5
        maximum: 21
        minimum: 1
        type: integer
      title:
        example: Implement user authentication
        maxLength: 200
        minLength: 1
        type: string
    required:
    - title
    type: object
  models.TaskUpdateRequest:
    description: Request to update an existing task
    properties:
      assignee_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      description:
        example: Updated task description
        maxLength: 1000
        type: string
      due_date:
        example: "2024-01-20T00:00:00Z"
        type: string
      priority:
        enum:
        - low
        - medium
        - high
        - urgent
        example: high
        type: string
      sprint_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      status:
        enum:
        - todo
        - in_progress
        - review
        - done
        example: in_progress
        type: string
      story_points:
        example: 8
        maximum: 21
        minimum: 1
        type: integer
      title:
        example: Updated task title
        maxLength: 200
        minLength: 1
        type: string
    type: object
  models.User:
    description: User represents a user in the system
    properties:
      active:
        example: true
        type: boolean
      avatar_url:
        example: https://example.com/avatar.jpg
        type: string
      created_at:
        type: string
      email:
        example: john@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: hashedpassword
        type: string
      updated_at:
        type: string
      username:
        example: johndoe
        type: string
    type: object
  models.UserUpdateRequest:
    description: Request to update an existing user
    properties:
      active:
        example: true
        type: boolean
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        maxLength: 50
        minLength: 1
        type: string
      last_name:
        example: Doe
        maxLength: 50
        minLength: 1
        type: string
      password:
        example: newpassword123
        maxLength: 100
        minLength: 6
        type: string
      username:
        example: johndoe
        maxLength: 30
        minLength: 3
        type: string
    type: object
host: devhive-go-backend.fly.dev
info:
  contact:
    email: support@swagger.io
    name: DevHive Team
    url: http://www.swagger.io/support
  description: A comprehensive project management backend API for DevHive
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: DevHive Backend API
  version: "1.0"
paths:
  /admin/feature-flags:
    get:
      consumes:
      - application/json
      description: Retrieves all feature flags (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: List of feature flags
          schema:
            items:
              $ref: '#/definitions/models.FeatureFlag'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all feature flags
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Creates a new feature flag (admin only)
      parameters:
      - description: Feature flag to create
        in: body
        name: flag
        required: true
        schema:
          $ref: '#/definitions/controllers.FeatureFlagRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Feature flag created successfully
          schema:
            $ref: '#/definitions/models.FeatureFlag'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Feature flag already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create feature flag
      tags:
      - admin
  /admin/feature-flags/{key}:
    delete:
      consumes:
      - application/json
      description: Deletes a feature flag (admin only)
      parameters:
      - description: Feature flag key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Feature flag deleted successfully
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Feature flag not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete feature flag
      tags:
      - admin
    get:
      consumes:
      - application/json
      description: Retrieves a specific feature flag by key (admin only)
      parameters:
      - description: Feature flag key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Feature flag details
          schema:
            $ref: '#/definitions/models.FeatureFlag'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Feature flag not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get feature flag
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Updates an existing feature flag (admin only)
      parameters:
      - description: Feature flag key
        in: path
        name: key
        required: true
        type: string
      - description: Updated feature flag data
        in: body
        name: flag
        required: true
        schema:
          $ref: '#/definitions/controllers.FeatureFlagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Feature flag updated successfully
          schema:
            $ref: '#/definitions/models.FeatureFlag'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Feature flag not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update feature flag
      tags:
      - admin
  /admin/feature-flags/bulk-update:
    post:
      consumes:
      - application/json
      description: Bulk updates multiple feature flags (admin only)
      parameters:
      - description: Feature flags to update
        in: body
        name: flags
        required: true
        schema:
          $ref: '#/definitions/controllers.BulkUpdateFeatureFlagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Feature flags updated successfully
          schema:
            items:
              $ref: '#/definitions/models.FeatureFlag'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Bulk update feature flags
      tags:
      - admin
  /api/scrum/project:
    post:
      consumes:
      - application/json
      description: Creates a new project
      parameters:
      - description: Project to create
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.ProjectCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Project created successfully
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new project
      tags:
      - scrum
    put:
      consumes:
      - application/json
      description: Updates a project
      parameters:
      - description: Project to update
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.ProjectUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Project updated successfully
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a project
      tags:
      - scrum
  /api/scrum/project/{projectId}:
    delete:
      description: Deletes a project and all associated data
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project deleted successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a project
      tags:
      - scrum
    get:
      description: Gets a single project by ID
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project found
          schema:
            $ref: '#/definitions/models.Project'
        "404":
          description: No project found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get project by ID
      tags:
      - scrum
  /api/scrum/project/{projectId}/{userId}:
    post:
      description: Adds a user to a project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User joined project successfully
          schema:
            type: string
        "400":
          description: ProjectID or UserID is required
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Join project
      tags:
      - scrum
  /api/scrum/project/{projectId}/members/{userId}:
    delete:
      description: Removes a user from a project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User removed from project successfully
          schema:
            type: string
        "400":
          description: Project ID or User ID is missing
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Remove project member
      tags:
      - scrum
  /api/scrum/project/leave:
    post:
      consumes:
      - application/json
      description: Allows a user to leave a project, if not the owner
      parameters:
      - description: Leave project request
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/controllers.LeaveProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully left the project
          schema:
            type: string
        "400":
          description: Leave project data is null or user is owner
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Leave project
      tags:
      - scrum
  /api/scrum/project/members/{projectId}:
    get:
      description: Gets all members of a project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project members
          schema:
            items:
              $ref: '#/definitions/models.ProjectMember'
            type: array
        "404":
          description: No users found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get project members
      tags:
      - scrum
  /api/scrum/project/sprints/{projectId}:
    get:
      description: Gets all sprints in a project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project sprints
          schema:
            items:
              $ref: '#/definitions/models.Sprint'
            type: array
        "404":
          description: No sprints found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get project sprints
      tags:
      - scrum
  /api/scrum/project/sprints/active/{projectId}:
    get:
      description: Returns active sprints for a given project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Active sprints
          schema:
            items:
              $ref: '#/definitions/models.Sprint'
            type: array
        "404":
          description: No active sprints found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get active sprints
      tags:
      - scrum
  /api/scrum/project/tasks/{projectId}:
    get:
      description: Gets all tasks in a project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "404":
          description: No tasks found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get project tasks
      tags:
      - scrum
  /api/scrum/project/update-project-owner:
    put:
      consumes:
      - application/json
      description: Transfers ownership of a project to another user
      parameters:
      - description: Update project owner request
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateProjectOwnerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Project owner updated successfully
          schema:
            type: string
        "400":
          description: Update project owner data is null
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update project owner
      tags:
      - scrum
  /api/scrum/projects/user/{userId}:
    get:
      description: Gets all projects owned by a specific user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User projects
          schema:
            items:
              $ref: '#/definitions/models.Project'
            type: array
        "400":
          description: User ID is required
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: No projects found for the specified user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user projects
      tags:
      - scrum
  /api/scrum/sprint:
    post:
      consumes:
      - application/json
      description: Creates a new sprint
      parameters:
      - description: Sprint to create
        in: body
        name: sprint
        required: true
        schema:
          $ref: '#/definitions/models.SprintCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Sprint created successfully
          schema:
            $ref: '#/definitions/models.Sprint'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new sprint
      tags:
      - scrum
    put:
      consumes:
      - application/json
      description: Updates a sprint
      parameters:
      - description: Sprint to update
        in: body
        name: sprint
        required: true
        schema:
          $ref: '#/definitions/models.SprintUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Sprint updated successfully
          schema:
            $ref: '#/definitions/models.Sprint'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a sprint
      tags:
      - scrum
  /api/scrum/sprint/{sprintId}:
    delete:
      description: Deletes a sprint by ID
      parameters:
      - description: Sprint ID
        in: path
        name: sprintId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sprint deleted successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a sprint
      tags:
      - scrum
    get:
      description: Gets a single sprint by ID
      parameters:
      - description: Sprint ID
        in: path
        name: sprintId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sprint found
          schema:
            $ref: '#/definitions/models.Sprint'
        "404":
          description: No sprint found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get sprint by ID
      tags:
      - scrum
  /api/scrum/sprint/tasks/{sprintId}:
    get:
      description: Gets all tasks in a sprint
      parameters:
      - description: Sprint ID
        in: path
        name: sprintId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sprint tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "404":
          description: No tasks found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get sprint tasks
      tags:
      - scrum
  /api/scrum/task:
    post:
      consumes:
      - application/json
      description: Creates a new task
      parameters:
      - description: Task to create
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.TaskCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Task created successfully
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new task
      tags:
      - scrum
    put:
      consumes:
      - application/json
      description: Updates a task
      parameters:
      - description: Task to update
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.TaskUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Task updated successfully
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a task
      tags:
      - scrum
  /api/scrum/task/{taskId}:
    delete:
      description: Deletes a task by ID
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task deleted successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a task
      tags:
      - scrum
    get:
      description: Gets a single task by ID
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task found
          schema:
            $ref: '#/definitions/models.Task'
        "404":
          description: No task found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get task by ID
      tags:
      - scrum
  /api/scrum/task/status:
    put:
      consumes:
      - application/json
      description: Updates the status of a task
      parameters:
      - description: Task status update
        in: body
        name: taskStatus
        required: true
        schema:
          $ref: '#/definitions/controllers.ScrumUpdateTaskStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Task status updated successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update task status
      tags:
      - scrum
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Sends a password reset email to the user
      parameters:
      - description: Password reset request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request password reset
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticate user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: refresh
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Username or email already taken
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Resets user password using the reset token
      parameters:
      - description: Password reset with token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset password with token
      tags:
      - auth
  /database/execute-script:
    post:
      consumes:
      - application/json
      description: Executes a database script by name
      parameters:
      - description: Script execution request
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Script executed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Execute database script
      tags:
      - database
  /database/scripts:
    get:
      consumes:
      - application/json
      description: Returns a list of available database scripts
      produces:
      - application/json
      responses:
        "200":
          description: List of script names
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List database scripts
      tags:
      - database
  /database/scripts/{scriptName}:
    get:
      consumes:
      - application/json
      description: Returns the content of a specific database script
      parameters:
      - description: Script name
        in: path
        name: scriptName
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Script content
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Script not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get script content
      tags:
      - database
  /database/status:
    get:
      consumes:
      - application/json
      description: Returns the current database connection status
      produces:
      - application/json
      responses:
        "200":
          description: Database status
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get database status
      tags:
      - database
  /mail/send:
    post:
      consumes:
      - application/json
      description: Sends an email to the specified recipient using the mail service
      parameters:
      - description: Email request containing To, Subject, and Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.EmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            $ref: '#/definitions/models.EmailResponse'
        "400":
          description: Bad request - invalid email request
          schema:
            $ref: '#/definitions/models.EmailError'
        "500":
          description: Internal server error - email sending failed
          schema:
            $ref: '#/definitions/models.EmailError'
      security:
      - BearerAuth: []
      summary: Send email
      tags:
      - mail
  /mobile/v2/projects:
    get:
      consumes:
      - application/json
      description: Retrieves a list of projects optimized for mobile consumption
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Search term for project names
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MobileProjectsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get projects for mobile app
      tags:
      - mobile
  /mobile/v2/projects/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves detailed project information optimized for mobile consumption
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MobileProjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get project details for mobile app
      tags:
      - mobile
  /mobile/v2/projects/{id}/messages:
    get:
      consumes:
      - application/json
      description: Retrieves a list of messages for a specific project optimized for
        mobile consumption
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Search term for message content
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MobileMessagesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get messages for mobile app
      tags:
      - mobile
  /mobile/v2/projects/{id}/sprints:
    get:
      consumes:
      - application/json
      description: Retrieves a list of sprints for a specific project optimized for
        mobile consumption
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Filter by sprint status (active, completed, planned)
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MobileSprintsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get sprints for mobile app
      tags:
      - mobile
  /projects:
    get:
      consumes:
      - application/json
      description: Retrieves all projects where the current user is a member or owner
      produces:
      - application/json
      responses:
        "200":
          description: List of projects
          schema:
            items:
              $ref: '#/definitions/models.Project'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Creates a new project for the current user
      parameters:
      - description: Project to create
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.ProjectCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Project created successfully
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create project
      tags:
      - projects
  /projects/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a project if the user is the owner
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Project deleted successfully
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: Retrieves a specific project by ID if the user has access
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project details
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get project
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Updates an existing project if the user has permission
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated project data
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.ProjectUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Project updated successfully
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update project
      tags:
      - projects
  /projects/{id}/members:
    get:
      consumes:
      - application/json
      description: Retrieves all members of a specific project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of project members
          schema:
            items:
              $ref: '#/definitions/models.ProjectMember'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get project members
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Adds a user as a member to a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Member to add
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/models.AddMemberRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Member added successfully
          schema:
            $ref: '#/definitions/models.ProjectMember'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add project member
      tags:
      - projects
  /projects/{id}/members/{userId}:
    delete:
      consumes:
      - application/json
      description: Removes a user from a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID to remove
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Member removed successfully
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove project member
      tags:
      - projects
  /projects/{id}/members/{userId}/role:
    put:
      consumes:
      - application/json
      description: Updates the role of a project member
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: New role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateProjectMemberRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Member role updated successfully
          schema:
            $ref: '#/definitions/models.ProjectMember'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update project member role
      tags:
      - projects
  /projects/{id}/messages:
    get:
      consumes:
      - application/json
      description: Retrieves all messages for a specific project with pagination
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Number of messages to return (default: 50)'
        in: query
        name: limit
        type: integer
      - description: 'Number of messages to skip (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of messages
          schema:
            items:
              $ref: '#/definitions/models.Message'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get project messages
      tags:
      - messages
    post:
      consumes:
      - application/json
      description: Creates a new message in a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Message to create
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.MessageCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Message created successfully
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create message
      tags:
      - messages
  /projects/{id}/messages/{messageId}:
    delete:
      consumes:
      - application/json
      description: Deletes a message if the user has permission
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Message ID
        in: path
        name: messageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Message deleted successfully
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Message not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete message
      tags:
      - messages
    put:
      consumes:
      - application/json
      description: Updates an existing message if the user has permission
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Message ID
        in: path
        name: messageId
        required: true
        type: string
      - description: Updated message data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.MessageUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message updated successfully
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Message not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update message
      tags:
      - messages
  /projects/{id}/sprints:
    get:
      consumes:
      - application/json
      description: Retrieves all sprints for a specific project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of sprints
          schema:
            items:
              $ref: '#/definitions/models.Sprint'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get project sprints
      tags:
      - sprints
    post:
      consumes:
      - application/json
      description: Creates a new sprint for a specific project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Sprint to create
        in: body
        name: sprint
        required: true
        schema:
          $ref: '#/definitions/models.SprintCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Sprint created successfully
          schema:
            $ref: '#/definitions/models.Sprint'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create sprint
      tags:
      - sprints
  /projects/{id}/sprints/{sprintId}:
    delete:
      consumes:
      - application/json
      description: Deletes a sprint if the user has permission
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Sprint ID
        in: path
        name: sprintId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Sprint deleted successfully
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Sprint not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete sprint
      tags:
      - sprints
    get:
      consumes:
      - application/json
      description: Retrieves a specific sprint by ID if the user has access
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Sprint ID
        in: path
        name: sprintId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sprint details
          schema:
            $ref: '#/definitions/models.Sprint'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Sprint not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get sprint
      tags:
      - sprints
    put:
      consumes:
      - application/json
      description: Updates an existing sprint if the user has permission
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Sprint ID
        in: path
        name: sprintId
        required: true
        type: string
      - description: Updated sprint data
        in: body
        name: sprint
        required: true
        schema:
          $ref: '#/definitions/models.SprintUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Sprint updated successfully
          schema:
            $ref: '#/definitions/models.Sprint'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Sprint not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update sprint
      tags:
      - sprints
  /projects/{id}/sprints/{sprintId}/complete:
    post:
      consumes:
      - application/json
      description: Completes a sprint and changes its status to completed
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Sprint ID
        in: path
        name: sprintId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sprint completed successfully
          schema:
            $ref: '#/definitions/models.Sprint'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Sprint not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Complete sprint
      tags:
      - sprints
  /projects/{id}/sprints/{sprintId}/start:
    post:
      consumes:
      - application/json
      description: Starts a sprint and changes its status to active
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Sprint ID
        in: path
        name: sprintId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sprint started successfully
          schema:
            $ref: '#/definitions/models.Sprint'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Sprint not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Start sprint
      tags:
      - sprints
  /projects/{id}/sprints/{sprintId}/tasks:
    get:
      consumes:
      - application/json
      description: Retrieves all tasks for a specific sprint
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Sprint ID
        in: path
        name: sprintId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get sprint tasks
      tags:
      - tasks
  /projects/{id}/tasks:
    get:
      consumes:
      - application/json
      description: Retrieves all tasks for a specific project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get project tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Creates a new task for a specific project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Task to create
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.TaskCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Task created successfully
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create task
      tags:
      - tasks
  /projects/{id}/tasks/{taskId}:
    delete:
      consumes:
      - application/json
      description: Deletes a task if the user has permission
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Task deleted successfully
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete task
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Retrieves a specific task by ID if the user has access
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task details
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get task
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Updates an existing task if the user has permission
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      - description: Updated task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.TaskUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Task updated successfully
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update task
      tags:
      - tasks
  /projects/{id}/tasks/{taskId}/assign:
    post:
      consumes:
      - application/json
      description: Assigns a task to a specific user
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      - description: Task assignment
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/controllers.AssignTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Task assigned successfully
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign task
      tags:
      - tasks
  /projects/{id}/tasks/{taskId}/status:
    patch:
      consumes:
      - application/json
      description: Updates the status of a specific task
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      - description: Task status update
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateTaskStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Task status updated successfully
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update task status
      tags:
      - tasks
  /users/{id}/activate:
    put:
      consumes:
      - application/json
      description: Activates a deactivated user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User activated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Insufficient permissions
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Activate user account
      tags:
      - users
  /users/{id}/deactivate:
    put:
      consumes:
      - application/json
      description: Deactivates an active user account (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deactivated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Insufficient permissions
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Deactivate user account
      tags:
      - users
  /users/avatar:
    post:
      consumes:
      - multipart/form-data
      description: Upload a new avatar image for the current authenticated user
      parameters:
      - description: Avatar image file (JPEG, PNG, GIF, WebP, max 5MB)
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Avatar uploaded successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - invalid file or size
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload user avatar
      tags:
      - users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Retrieve the current authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the current authenticated user's profile information
      parameters:
      - description: User profile update request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
  /users/search:
    get:
      consumes:
      - application/json
      description: Search for users by username, email, or name
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of matching users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Search users
      tags:
      - users
schemes:
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
