basePath: /api/v1
definitions:
  controllers.AuthRequest:
    description: Authentication request for login
    properties:
      password:
        example: password123
        type: string
      username:
        example: johndoe
        type: string
    required:
    - password
    - username
    type: object
  controllers.AuthResponse:
    description: Authentication response with tokens
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  controllers.RegisterRequest:
    description: User registration request
    properties:
      email:
        example: john@example.com
        type: string
      first_name:
        example: John
        maxLength: 50
        minLength: 1
        type: string
      last_name:
        example: Doe
        maxLength: 50
        minLength: 1
        type: string
      password:
        example: password123
        maxLength: 100
        minLength: 6
        type: string
      username:
        example: johndoe
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  models.Project:
    description: Project represents a project in the system
    properties:
      description:
        example: A description of my project
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      member_count:
        example: 5
        type: integer
      members:
        items:
          $ref: '#/definitions/models.User'
        type: array
      name:
        example: My Project
        type: string
      owner:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Additional fields for API responses
      project_owner_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  models.ProjectCreateRequest:
    description: Request to create a new project
    properties:
      description:
        example: Description of my new project
        maxLength: 255
        minLength: 1
        type: string
      name:
        example: My New Project
        maxLength: 50
        minLength: 1
        type: string
    required:
    - description
    - name
    type: object
  models.Sprint:
    properties:
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: string
      name:
        type: string
      project_id:
        type: string
      start_date:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.Task:
    description: Task represents a task in the system
    properties:
      assignee:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Additional fields for API responses
      assignee_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      date_created:
        example: "2025-08-28T14:00:00Z"
        type: string
      description:
        example: Implement user authentication
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      sprint:
        $ref: '#/definitions/models.Sprint'
      sprint_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      status:
        example: 1
        type: integer
    type: object
  models.TaskCreateRequest:
    description: Request to create a new task
    properties:
      assignee_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      description:
        example: Implement user authentication
        maxLength: 255
        minLength: 1
        type: string
      status:
        example: 1
        maximum: 3
        minimum: 0
        type: integer
    required:
    - description
    - status
    type: object
  models.TaskUpdateRequest:
    description: Request to update an existing task
    properties:
      assignee_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      description:
        example: Implement user authentication with OAuth2
        maxLength: 255
        minLength: 1
        type: string
      status:
        example: 2
        maximum: 3
        minimum: 0
        type: integer
    type: object
  models.User:
    description: User represents a user in the system
    properties:
      active:
        example: true
        type: boolean
      avatar_url:
        example: https://example.com/avatar.jpg
        type: string
      email:
        example: john@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: hashedpassword
        type: string
      username:
        example: johndoe
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: DevHive Team
    url: http://www.swagger.io/support
  description: A comprehensive project management backend API for DevHive
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: DevHive Backend API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticate user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: refresh
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Username or email already taken
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /projects:
    get:
      consumes:
      - application/json
      description: Retrieve all projects for the authenticated user with pagination
      parameters:
      - default: 20
        description: Number of projects to return (max 100)
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of projects to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Projects with pagination info
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project for the authenticated user
      parameters:
      - description: Project creation request
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.ProjectCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Project created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new project
      tags:
      - projects
  /projects/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific project by ID for the authenticated user
      parameters:
      - description: Project ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Project details
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - User not a member
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Project not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a specific project
      tags:
      - projects
  /projects/{projectId}/sprints/{sprintId}/tasks:
    get:
      consumes:
      - application/json
      description: Retrieve all tasks for a specific sprint with pagination
      parameters:
      - description: Project ID
        format: uuid
        in: path
        name: projectId
        required: true
        type: string
      - description: Sprint ID
        format: uuid
        in: path
        name: sprintId
        required: true
        type: string
      - default: 20
        description: Number of tasks to return (max 100)
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of tasks to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tasks with pagination info
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Access denied to project
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get sprint tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task in a specific sprint
      parameters:
      - description: Project ID
        format: uuid
        in: path
        name: projectId
        required: true
        type: string
      - description: Sprint ID
        format: uuid
        in: path
        name: sprintId
        required: true
        type: string
      - description: Task creation request
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.TaskCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Task created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Access denied to project
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - tasks
  /projects/{projectId}/sprints/{sprintId}/tasks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a task from a sprint
      parameters:
      - description: Project ID
        format: uuid
        in: path
        name: projectId
        required: true
        type: string
      - description: Sprint ID
        format: uuid
        in: path
        name: sprintId
        required: true
        type: string
      - description: Task ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Access denied to project
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Task not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a task
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Retrieve a specific task by ID from a sprint
      parameters:
      - description: Project ID
        format: uuid
        in: path
        name: projectId
        required: true
        type: string
      - description: Sprint ID
        format: uuid
        in: path
        name: sprintId
        required: true
        type: string
      - description: Task ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task details
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Access denied to project
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Task not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a specific task
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update an existing task in a sprint
      parameters:
      - description: Project ID
        format: uuid
        in: path
        name: projectId
        required: true
        type: string
      - description: Sprint ID
        format: uuid
        in: path
        name: sprintId
        required: true
        type: string
      - description: Task ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Task update request
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.TaskUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Task updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden - Access denied to project
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Task not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a task
      tags:
      - tasks
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
