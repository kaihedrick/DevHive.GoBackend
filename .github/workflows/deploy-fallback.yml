name: Deploy - Production Deployment (Fallback)

on:
  workflow_dispatch:
    inputs:
      use_cache:
        description: 'Use Docker build cache'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest Go version
        id: go_version
        run: |
          LATEST_VERSION=$(curl -s https://go.dev/VERSION?m=text | head -n1 | sed 's/go//')
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "Latest Go version: $LATEST_VERSION"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.LATEST_VERSION }}
          cache: true

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests
        run: go test ./...

      - name: Build application
        run: |
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/devhive-api

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image (with cache)
        if: ${{ inputs.use_cache == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image (no cache)
        if: ${{ inputs.use_cache != 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --remote-only --strategy immediate

      - name: Verify deployment
        run: |
          sleep 30
          curl -f https://devhive-go-backend.fly.dev/health || exit 1
          echo "‚úÖ Production deployment verified successfully"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üöÄ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
          fi
