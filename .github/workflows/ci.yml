name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest Go version
        id: go_version
        run: |
          LATEST_VERSION=$(curl -s https://go.dev/VERSION?m=text | head -n1 | sed 's/go//')
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "Latest Go version: $LATEST_VERSION"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.LATEST_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Generate sqlc code
        run: |
          if command -v sqlc &> /dev/null; then
            sqlc generate
          else
            echo "⚠️ sqlc not installed, skipping code generation"
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "❌ Code is not properly formatted. Please run 'gofmt -s -w .'"
            gofmt -s -l .
            exit 1
          fi
          echo "✅ Code formatting is correct"

      - name: Run linting
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          golangci-lint run --timeout=5m

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...

      - name: Check test coverage
        run: |
          go tool cover -func=coverage.out
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Test coverage: ${coverage}%"
          if (( $(echo "$coverage < 50" | bc -l) )); then
            echo "❌ Test coverage below 50% (current: ${coverage}%)"
            exit 1
          fi
          echo "✅ Test coverage above 50%"

      - name: Build application
        run: |
          go build -o bin/devhive-api ./cmd/devhive-api
          echo "✅ Application builds successfully"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Trivy Security Scan'

  build:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest Go version
        id: go_version
        run: |
          LATEST_VERSION=$(curl -s https://go.dev/VERSION?m=text | head -n1 | sed 's/go//')
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "Latest Go version: $LATEST_VERSION"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.LATEST_VERSION }}
          cache: true

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Build for multiple platforms
        run: |
          mkdir -p bin
          
          # Build for Linux (production)
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o bin/devhive-api-linux-amd64 ./cmd/devhive-api
          
          # Build for Windows (development)
          GOOS=windows GOARCH=amd64 go build -o bin/devhive-api-windows-amd64.exe ./cmd/devhive-api
          
          # Build for macOS (development)
          GOOS=darwin GOARCH=amd64 go build -o bin/devhive-api-darwin-amd64 ./cmd/devhive-api

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: devhive-api-binaries
          path: bin/
          retention-days: 7