name: Release - Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest Go version
        id: go_version
        run: |
          LATEST_VERSION=$(curl -s https://go.dev/VERSION?m=text | head -n1 | sed 's/go//')
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "Latest Go version: $LATEST_VERSION"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.LATEST_VERSION }}
          cache: true

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests
        run: go test ./...

      - name: Build for multiple platforms
        run: |
          mkdir -p bin
          
          # Build for Linux
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o bin/devhive-api-linux-amd64 ./cmd/devhive-api
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -a -installsuffix cgo -o bin/devhive-api-linux-arm64 ./cmd/devhive-api
          
          # Build for Windows
          GOOS=windows GOARCH=amd64 go build -o bin/devhive-api-windows-amd64.exe ./cmd/devhive-api
          
          # Build for macOS
          GOOS=darwin GOARCH=amd64 go build -o bin/devhive-api-darwin-amd64 ./cmd/devhive-api
          GOOS=darwin GOARCH=arm64 go build -o bin/devhive-api-darwin-arm64 ./cmd/devhive-api

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bin/devhive-api-linux-amd64
            bin/devhive-api-linux-arm64
            bin/devhive-api-windows-amd64.exe
            bin/devhive-api-darwin-amd64
            bin/devhive-api-darwin-arm64
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-release:
    name: Deploy Release to Production
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest Go version
        id: go_version
        run: |
          LATEST_VERSION=$(curl -s https://go.dev/VERSION?m=text | head -n1 | sed 's/go//')
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "Latest Go version: $LATEST_VERSION"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.LATEST_VERSION }}
          cache: true

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests
        run: go test ./...

      - name: Build application
        run: |
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main ./cmd/devhive-api

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@v1
        with:
          version: 0.3.180

      - name: Deploy to Fly.io Production
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --remote-only --strategy immediate

      - name: Verify production deployment
        run: |
          sleep 30
          curl -f https://devhive-go-backend.fly.dev/health || exit 1
          echo "âœ… Release deployment verified successfully"