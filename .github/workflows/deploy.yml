name: CI/CD - DevHive Go Backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  build-test-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache: true

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Ensures api/openapi.yaml -> internal/gen/openapi.gen.go is up to date
      - name: Verify OpenAPI codegen is up to date
        run: |
          make oapi
          if ! git diff --quiet --exit-code; then
            echo "Error: OpenAPI generated files are out of date. Run 'make oapi' and commit changes." >&2
            git --no-pager diff --name-only
            exit 1
          fi

      - name: Go vet
        run: go vet ./...

      - name: Run tests
        run: go test ./... -coverprofile=coverage.out

      - name: Build binary (sanity)
        run: go build ./cmd/server

  publish-and-deploy:
    needs: build-test-validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Option A: source deploy (uses your Dockerfile and fly.toml)
          flyctl deploy --remote-only --strategy immediate

          # Option B: deploy the GHCR image (uncomment to pin to image)
          # flyctl deploy --image ghcr.io/${{ github.repository }}:sha-${{ github.sha }} --strategy immediate
