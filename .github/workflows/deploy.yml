name: Deploy to Fly.io

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true

      - name: Set up Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Run tests
        run: |
          go mod download
          go test -v ./...

      - name: Build and deploy
        run: |
          go build -o devhive ./cmd/main.go
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            flyctl deploy --remote-only --app devhive-backend
          else
            flyctl deploy --remote-only --app devhive-backend-staging
          fi

      - name: Verify deployment
        run: |
          sleep 30
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            curl -f https://api.devhive.it.com/health || exit 1
          else
            curl -f https://devhive-backend-staging.fly.dev/health || exit 1

  test:
    name: Run tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true

      - name: Run tests
        run: |
          go mod download
          go test -v ./...

      - name: Run linting
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          golangci-lint run

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not properly formatted. Please run 'gofmt -s -w .'"
            exit 1
          fi

  security:
    name: Security scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
