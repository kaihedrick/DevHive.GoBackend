openapi: 3.0.3
info:
  title: DevHive Backend API
  version: 1.0.0
  description: A comprehensive project management backend API for DevHive
  contact:
    name: DevHive Team
    email: support@devhive.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://devhive-go-backend.fly.dev
    description: Production server
  - url: http://localhost:8080
    description: Local development server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Health check
      description: Check if the service is healthy
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "DevHive Backend"
                  time:
                    type: string
                    format: date-time

  /api/v1/auth/register:
    post:
      summary: User registration
      description: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
        '409':
          description: User already exists

  /api/v1/auth/login:
    post:
      summary: User login
      description: Authenticate user and get access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials

  /api/v1/auth/refresh:
    post:
      summary: Refresh token
      description: Get new access token using refresh token
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token

  /api/v1/users/profile:
    get:
      summary: Get user profile
      description: Get current user's profile information
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized

  /api/v1/users/profile:
    put:
      summary: Update user profile
      description: Update current user's profile information
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /api/v1/projects:
    get:
      summary: Get projects
      description: Get all projects for the current user
      tags:
        - Projects
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectResponse'
        '401':
          description: Unauthorized

  /api/v1/projects:
    post:
      summary: Create project
      description: Create a new project
      tags:
        - Projects
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /api/v1/projects/{id}:
    get:
      summary: Get project by ID
      description: Get a specific project by ID
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          description: Project not found

  /api/v1/projects/{id}:
    put:
      summary: Update project
      description: Update an existing project
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Bad request
        '404':
          description: Project not found

  /api/v1/projects/{id}:
    delete:
      summary: Delete project
      description: Delete a project
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project deleted successfully
        '404':
          description: Project not found

  /api/v1/projects/{id}/sprints:
    get:
      summary: Get project sprints
      description: Get all sprints for a project
      tags:
        - Sprints
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sprints retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SprintResponse'

  /api/v1/projects/{id}/sprints:
    post:
      summary: Create sprint
      description: Create a new sprint for a project
      tags:
        - Sprints
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SprintCreate'
      responses:
        '201':
          description: Sprint created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SprintResponse'

  /api/v1/projects/{id}/tasks:
    get:
      summary: Get project tasks
      description: Get all tasks for a project
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'

  /api/v1/projects/{id}/tasks:
    post:
      summary: Create task
      description: Create a new task for a project
      tags:
        - Tasks
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  /api/v1/projects/{id}/messages:
    get:
      summary: Get project messages
      description: Get all messages for a project
      tags:
        - Messages
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageResponse'

  /api/v1/projects/{id}/messages:
    post:
      summary: Create message
      description: Create a new message for a project
      tags:
        - Messages
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreate'
      responses:
        '201':
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/v1/database/execute-script:
    post:
      summary: Execute database script
      description: Execute a database script
      tags:
        - Database
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScriptExecution'
      responses:
        '200':
          description: Script executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScriptResult'

  /api/v1/mail/send:
    post:
      summary: Send email
      description: Send an email using the mail service
      tags:
        - Mail
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      responses:
        '200':
          description: Email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailResponse'

  /ws:
    get:
      summary: WebSocket connection
      description: Establish WebSocket connection
      tags:
        - WebSocket
      responses:
        '101':
          description: Switching to WebSocket protocol

  /ws/auth:
    get:
      summary: Authenticated WebSocket connection
      description: Establish authenticated WebSocket connection
      tags:
        - WebSocket
      security:
        - BearerAuth: []
      responses:
        '101':
          description: Switching to WebSocket protocol

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: integer
        user:
          $ref: '#/components/schemas/UserResponse'

    UserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        avatar_url:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserUpdate:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        avatar_url:
          type: string

    ProjectCreate:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500

    ProjectUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500

    ProjectResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        owner_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SprintCreate:
      type: object
      required:
        - name
        - start_date
        - end_date
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date

    SprintResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        status:
          type: string
          enum: [planned, active, completed]
        project_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TaskCreate:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        priority:
          type: string
          enum: [low, medium, high, critical]
        assignee_id:
          type: string

    TaskResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        priority:
          type: string
        status:
          type: string
          enum: [todo, in_progress, review, done]
        assignee_id:
          type: string
        project_id:
          type: string
        sprint_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    MessageCreate:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          maxLength: 1000

    MessageResponse:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        sender_id:
          type: string
        project_id:
          type: string
        created_at:
          type: string
          format: date-time

    ScriptExecution:
      type: object
      required:
        - script_name
      properties:
        script_name:
          type: string
        parameters:
          type: object

    ScriptResult:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        execution_time:
          type: number

    EmailRequest:
      type: object
      required:
        - to
        - subject
        - body
      properties:
        to:
          type: string
          format: email
        subject:
          type: string
        body:
          type: string
        is_html:
          type: boolean
          default: false

    EmailResponse:
      type: object
      properties:
        success:
          type: boolean
        message_id:
          type: string
        sent_at:
          type: string
          format: date-time

tags:
  - name: System
    description: System health and status endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
  - name: Projects
    description: Project management operations
  - name: Sprints
    description: Sprint management operations
  - name: Tasks
    description: Task management operations
  - name: Messages
    description: Project messaging operations
  - name: Database
    description: Database administration operations
  - name: Mail
    description: Email operations
  - name: WebSocket
    description: Real-time communication endpoints
